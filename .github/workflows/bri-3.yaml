name: bri-3

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev curl unzip

      - name: Create .env file
        working-directory: bri-3
        run: |
          touch .env
          echo DATABASE_URL=postgresql://postgres:example@localhost:5432/postgres >> .env
          echo DID_REGISTRY=0x03d5003bf0e79c5f5223588f347eba39afbc3818 >> .env
          echo DID_BPI_OPERATOR_PUBLIC_KEY=0x08872e27BC5d78F1FC4590803369492868A1FCCb >> .env
          echo DID_BPI_OPERATOR_PRIVATE_KEY=2c95d82bcd8851bd3a813c50afafb025228bf8d237e8fd37ba4adba3a7596d58 >> .env
          echo CCSM_NETWORK=localhost >> .env
          echo INFURA_PROVIDER_API_KEY=c5f37cd25eca4007a9768f18f492bc6f >> .env
          echo LOCALHOST_RPC_URL=http://127.0.0.1:8545 >> .env
          echo LOCALHOST_RPC_URL2=http://127.0.0.1:8546 >> .env
          echo LOCALHOST_CCSM_CONTRACT_ADDRESS=0x1CC96ba639d4fd7624913fde39122270a1aC5c34 >> .env
          echo SERVICE_URL=bri-3 >> .env
          echo BPI_NATS_SERVER_URL=localhost:4222 >> .env
          echo BPI_NATS_SERVER_USER=bpi_operator >> .env
          echo BPI_NATS_SERVER_PASS=liftboiliftboiliftboiliftboi1 >> .env
          echo BPI_ENCRYPTION_KEY_K_PARAM=yzkXp3vY_AZQ3YfLv9GMRTYkjUOpn9x18gPkoFvoUxQ >> .env
          echo BPI_ENCRYPTION_KEY_KTY_PARAM=oct >> .env
          echo SNARKJS_CIRCUITS_PATH=zeroKnowledgeArtifacts/circuits/ >> .env
          echo VSM_CYCLE_PERIOD_IN_SECS=15 >> .env
          echo VSM_CYCLE_TX_BATCH_SIZE=5 >> .env
          echo MERKLE_TREE_HASH_ALGH=sha256 >> .env
          echo EFAKTURA_API_KEY=${{ secrets.EFAKTURA_API_KEY }} >> .env
          echo EFAKTURA_INVOICE_ID=${{ secrets.EFAKTURA_INVOICE_ID }} >> .env
          echo EFAKTURA_URL=${{ secrets.EFAKTURA_URL }} >> .env
          echo CIRCUIT_TYPE=Plonk >> .env

      - name: Print .env for debugging
        working-directory: bri-3
        run: cat .env

      - name: Download and extract zeroKnowledgeArtifacts
        working-directory: bri-3
        run: |
          rm -rf zeroKnowledgeArtifacts
          curl -L https://zkartifacts.sfo3.digitaloceanspaces.com/zeroKnowledgeArtifacts.zip -o zeroKnowledgeArtifacts.zip
          unzip -q zeroKnowledgeArtifacts.zip -d .
          rm zeroKnowledgeArtifacts.zip

      - name: Install project dependencies
        working-directory: bri-3
        run: npm ci

      # - name: Run build
      #   working-directory: bri-3
      #   run: npm run build

      # - name: Run prettier
      #   working-directory: bri-3
      #   run: npm run format:check

      # - name: Run linter
      #   working-directory: bri-3
      #   run: npm run lint:check

      # - name: Run tests
      #   working-directory: bri-3
      #   run: npm run test

      # - name: Run sri tests
      #   working-directory: bri-3
      #   run: make test-sri

      - name: Run origination tests
        working-directory: bri-3
        run: make test-origination

      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2

      - name: Cleanup Docker containers
        if: always()
        working-directory: bri-3
        run: make down
